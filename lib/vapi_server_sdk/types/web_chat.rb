# frozen_string_literal: true
require_relative "web_chat_output_item"
require "ostruct"
require "json"

module Vapi
  class WebChat
  # @return [String] This is the unique identifier for the chat.
    attr_reader :id
  # @return [String] This is the ID of the session for the chat. Send it in the next chat request to
#  continue the conversation.
    attr_reader :session_id
  # @return [Array<Vapi::WebChatOutputItem>] This is the output messages generated by the system in response to the input.
    attr_reader :output
  # @return [OpenStruct] Additional properties unmapped to the current class definition
    attr_reader :additional_properties
  # @return [Object] 
    attr_reader :_field_set
    protected :_field_set

    OMIT = Object.new

    # @param id [String] This is the unique identifier for the chat.
    # @param session_id [String] This is the ID of the session for the chat. Send it in the next chat request to
#  continue the conversation.
    # @param output [Array<Vapi::WebChatOutputItem>] This is the output messages generated by the system in response to the input.
    # @param additional_properties [OpenStruct] Additional properties unmapped to the current class definition
    # @return [Vapi::WebChat]
    def initialize(id:, session_id: OMIT, output:, additional_properties: nil)
      @id = id
      @session_id = session_id if session_id != OMIT
      @output = output
      @additional_properties = additional_properties
      @_field_set = { "id": id, "sessionId": session_id, "output": output }.reject do | _k, v |
  v == OMIT
end
    end
# Deserialize a JSON object to an instance of WebChat
    #
    # @param json_object [String] 
    # @return [Vapi::WebChat]
    def self.from_json(json_object:)
      struct = JSON.parse(json_object, object_class: OpenStruct)
      parsed_json = JSON.parse(json_object)
      id = parsed_json["id"]
      session_id = parsed_json["sessionId"]
      output = parsed_json["output"]&.map do | item |
  item = item.to_json
  Vapi::WebChatOutputItem.from_json(json_object: item)
end
      new(
        id: id,
        session_id: session_id,
        output: output,
        additional_properties: struct
      )
    end
# Serialize an instance of WebChat to a JSON object
    #
    # @return [String]
    def to_json
      @_field_set&.to_json
    end
# Leveraged for Union-type generation, validate_raw attempts to parse the given
#  hash and check each fields type against the current object's property
#  definitions.
    #
    # @param obj [Object] 
    # @return [Void]
    def self.validate_raw(obj:)
      obj.id.is_a?(String) != false || raise("Passed value for field obj.id is not the expected type, validation failed.")
      obj.session_id&.is_a?(String) != false || raise("Passed value for field obj.session_id is not the expected type, validation failed.")
      obj.output.is_a?(Array) != false || raise("Passed value for field obj.output is not the expected type, validation failed.")
    end
  end
end
# frozen_string_literal: true
require_relative "create_assistant_dto"
require_relative "chat_input"
require_relative "chat_messages_item"
require_relative "chat_output_item"
require "date"
require "date"
require "ostruct"
require "json"

module Vapi
  class Chat
  # @return [String] This is the assistant that will be used for the chat. To use an existing
#  assistant, use `assistantId` instead.
    attr_reader :assistant_id
  # @return [Vapi::CreateAssistantDto] This is the assistant that will be used for the chat. To use an existing
#  assistant, use `assistantId` instead.
    attr_reader :assistant
  # @return [String] This is the name of the chat. This is just for your own reference.
    attr_reader :name
  # @return [String] This is the ID of the session that will be used for the chat.
#  Mutually exclusive with previousChatId.
    attr_reader :session_id
  # @return [Vapi::ChatInput] This is the input text for the chat.
#  Can be a string or an array of chat messages.
    attr_reader :input
  # @return [Boolean] This is a flag that determines whether the response should be streamed.
#  When true, the response will be sent as chunks of text.
    attr_reader :stream
  # @return [String] This is the ID of the chat that will be used as context for the new chat.
#  The messages from the previous chat will be used as context.
#  Mutually exclusive with sessionId.
    attr_reader :previous_chat_id
  # @return [String] This is the unique identifier for the chat.
    attr_reader :id
  # @return [String] This is the unique identifier for the org that this chat belongs to.
    attr_reader :org_id
  # @return [Array<Vapi::ChatMessagesItem>] This is an array of messages used as context for the chat.
#  Used to provide message history for multi-turn conversations.
    attr_reader :messages
  # @return [Array<Vapi::ChatOutputItem>] This is the output messages generated by the system in response to the input.
    attr_reader :output
  # @return [DateTime] This is the ISO 8601 date-time string of when the chat was created.
    attr_reader :created_at
  # @return [DateTime] This is the ISO 8601 date-time string of when the chat was last updated.
    attr_reader :updated_at
  # @return [OpenStruct] Additional properties unmapped to the current class definition
    attr_reader :additional_properties
  # @return [Object] 
    attr_reader :_field_set
    protected :_field_set

    OMIT = Object.new

    # @param assistant_id [String] This is the assistant that will be used for the chat. To use an existing
#  assistant, use `assistantId` instead.
    # @param assistant [Vapi::CreateAssistantDto] This is the assistant that will be used for the chat. To use an existing
#  assistant, use `assistantId` instead.
    # @param name [String] This is the name of the chat. This is just for your own reference.
    # @param session_id [String] This is the ID of the session that will be used for the chat.
#  Mutually exclusive with previousChatId.
    # @param input [Vapi::ChatInput] This is the input text for the chat.
#  Can be a string or an array of chat messages.
    # @param stream [Boolean] This is a flag that determines whether the response should be streamed.
#  When true, the response will be sent as chunks of text.
    # @param previous_chat_id [String] This is the ID of the chat that will be used as context for the new chat.
#  The messages from the previous chat will be used as context.
#  Mutually exclusive with sessionId.
    # @param id [String] This is the unique identifier for the chat.
    # @param org_id [String] This is the unique identifier for the org that this chat belongs to.
    # @param messages [Array<Vapi::ChatMessagesItem>] This is an array of messages used as context for the chat.
#  Used to provide message history for multi-turn conversations.
    # @param output [Array<Vapi::ChatOutputItem>] This is the output messages generated by the system in response to the input.
    # @param created_at [DateTime] This is the ISO 8601 date-time string of when the chat was created.
    # @param updated_at [DateTime] This is the ISO 8601 date-time string of when the chat was last updated.
    # @param additional_properties [OpenStruct] Additional properties unmapped to the current class definition
    # @return [Vapi::Chat]
    def initialize(assistant_id: OMIT, assistant: OMIT, name: OMIT, session_id: OMIT, input: OMIT, stream: OMIT, previous_chat_id: OMIT, id:, org_id:, messages: OMIT, output: OMIT, created_at:, updated_at:, additional_properties: nil)
      @assistant_id = assistant_id if assistant_id != OMIT
      @assistant = assistant if assistant != OMIT
      @name = name if name != OMIT
      @session_id = session_id if session_id != OMIT
      @input = input if input != OMIT
      @stream = stream if stream != OMIT
      @previous_chat_id = previous_chat_id if previous_chat_id != OMIT
      @id = id
      @org_id = org_id
      @messages = messages if messages != OMIT
      @output = output if output != OMIT
      @created_at = created_at
      @updated_at = updated_at
      @additional_properties = additional_properties
      @_field_set = { "assistantId": assistant_id, "assistant": assistant, "name": name, "sessionId": session_id, "input": input, "stream": stream, "previousChatId": previous_chat_id, "id": id, "orgId": org_id, "messages": messages, "output": output, "createdAt": created_at, "updatedAt": updated_at }.reject do | _k, v |
  v == OMIT
end
    end
# Deserialize a JSON object to an instance of Chat
    #
    # @param json_object [String] 
    # @return [Vapi::Chat]
    def self.from_json(json_object:)
      struct = JSON.parse(json_object, object_class: OpenStruct)
      parsed_json = JSON.parse(json_object)
      assistant_id = parsed_json["assistantId"]
      unless parsed_json["assistant"].nil?
        assistant = parsed_json["assistant"].to_json
        assistant = Vapi::CreateAssistantDto.from_json(json_object: assistant)
      else
        assistant = nil
      end
      name = parsed_json["name"]
      session_id = parsed_json["sessionId"]
      unless parsed_json["input"].nil?
        input = parsed_json["input"].to_json
        input = Vapi::ChatInput.from_json(json_object: input)
      else
        input = nil
      end
      stream = parsed_json["stream"]
      previous_chat_id = parsed_json["previousChatId"]
      id = parsed_json["id"]
      org_id = parsed_json["orgId"]
      messages = parsed_json["messages"]&.map do | item |
  item = item.to_json
  Vapi::ChatMessagesItem.from_json(json_object: item)
end
      output = parsed_json["output"]&.map do | item |
  item = item.to_json
  Vapi::ChatOutputItem.from_json(json_object: item)
end
      created_at = unless parsed_json["createdAt"].nil?
  DateTime.parse(parsed_json["createdAt"])
else
  nil
end
      updated_at = unless parsed_json["updatedAt"].nil?
  DateTime.parse(parsed_json["updatedAt"])
else
  nil
end
      new(
        assistant_id: assistant_id,
        assistant: assistant,
        name: name,
        session_id: session_id,
        input: input,
        stream: stream,
        previous_chat_id: previous_chat_id,
        id: id,
        org_id: org_id,
        messages: messages,
        output: output,
        created_at: created_at,
        updated_at: updated_at,
        additional_properties: struct
      )
    end
# Serialize an instance of Chat to a JSON object
    #
    # @return [String]
    def to_json
      @_field_set&.to_json
    end
# Leveraged for Union-type generation, validate_raw attempts to parse the given
#  hash and check each fields type against the current object's property
#  definitions.
    #
    # @param obj [Object] 
    # @return [Void]
    def self.validate_raw(obj:)
      obj.assistant_id&.is_a?(String) != false || raise("Passed value for field obj.assistant_id is not the expected type, validation failed.")
      obj.assistant.nil? || Vapi::CreateAssistantDto.validate_raw(obj: obj.assistant)
      obj.name&.is_a?(String) != false || raise("Passed value for field obj.name is not the expected type, validation failed.")
      obj.session_id&.is_a?(String) != false || raise("Passed value for field obj.session_id is not the expected type, validation failed.")
      obj.input.nil? || Vapi::ChatInput.validate_raw(obj: obj.input)
      obj.stream&.is_a?(Boolean) != false || raise("Passed value for field obj.stream is not the expected type, validation failed.")
      obj.previous_chat_id&.is_a?(String) != false || raise("Passed value for field obj.previous_chat_id is not the expected type, validation failed.")
      obj.id.is_a?(String) != false || raise("Passed value for field obj.id is not the expected type, validation failed.")
      obj.org_id.is_a?(String) != false || raise("Passed value for field obj.org_id is not the expected type, validation failed.")
      obj.messages&.is_a?(Array) != false || raise("Passed value for field obj.messages is not the expected type, validation failed.")
      obj.output&.is_a?(Array) != false || raise("Passed value for field obj.output is not the expected type, validation failed.")
      obj.created_at.is_a?(DateTime) != false || raise("Passed value for field obj.created_at is not the expected type, validation failed.")
      obj.updated_at.is_a?(DateTime) != false || raise("Passed value for field obj.updated_at is not the expected type, validation failed.")
    end
  end
end